

* "Library" (simplify.R)

Contains functions for doing preprocess on the raw data (in Excel or csv format), to work with it. 

It is intended to be used for creating "pivot" tables, so it will work with two parameteres 
field and pField corresponding to the parameters on which the pivoting will be made, determined by the second
(ex: (field -> worker_id, pField -> relations), (field -> unit_id, pField -> relations))

Functions: 
	   - Colselect: column selection, discard the columns that won't be used (with error control). 
	          - Expects: data and two parameters (field and pField), the rest will be discarded. 
	   - abcol: replacement of column keys for its abbreviation (contains the table of equivalencies). 
	     	  - Expects the array of keys to be abbreviated. 
	   - simplify: 	    	
	       - expects: data and pivoting field (pField). 	          	      	    
	       - It will take all the options of the pivoted field (ex: relation) and create a contingency table for those. 
	       - NOTE: Field decomposition: for columns with multiple values (ex: relations assigned by workers), decomposes the column into single value columns. 
	       	        - Multiple value column label format:  "<value1>\n<value2>...\n<valueN>"


Usual course of action: 

      #From the dataset, select which columns are we going to use to generate the pivot matrix. 
      d <- colselect(data,field,pField)

      #Generate the pivot matrix 
      res <-  simplify(d,pField)

      # simplify function returns a contingency table, transform it into a data.frame (more app. for doing R processing). 
      dfres <- as.data.frame(rbind(res))      

      #Replace the names of the columns by its abbreviated key (for clearness sake). 
      colnames(dfres) <- unlist(lapply(colnames(dfres),abcol))

The generated data frame(s) is an appropriate structure to be used for data processing in R (equivalent to those that existed before in the excel tables). 
The scripts include the boilerplate code necessary for reading the sources (excel or cflower dump) and to export the data frame into an excel spreadsheet (after generating the data frame in between).  

	    
* Scripts: 

  -  Expect two parameters: input file, output file.		

  * excel.R:
    Deletes empty columns: those that don't have any value assigned (usually, excel worksheets have a lot of useless unussed columns, maybe created by accident). 
  
  Default values: 
  - Input file: "results.csv"
  - Output file: "output-results-csv.xlsx"

  *  cflower.R
  Expects two parameters: input file, output, file. 

  Default values: 
    inputfile <- "90-sents-WebSci13-all-batches-with-manual-annotations.xlsx"
    outputfile  <- "output.xlsx"
    

Example: 

     $ ./cflower.R results2.csv output-batch-34.xlsx
     
Have been tested on bash shell, to run them be sure both have execution permission. 
(chmod +x cflower.R,chmod +x excel.R)
 